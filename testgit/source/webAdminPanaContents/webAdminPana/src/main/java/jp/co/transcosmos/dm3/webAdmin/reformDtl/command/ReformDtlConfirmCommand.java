package jp.co.transcosmos.dm3.webAdmin.reformDtl.command;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jp.co.transcosmos.dm3.command.Command;
import jp.co.transcosmos.dm3.core.model.exception.NotFoundException;
import jp.co.transcosmos.dm3.corePana.constant.PanaCommonParameters;
import jp.co.transcosmos.dm3.corePana.model.housing.form.PanaHousingSearchForm;
import jp.co.transcosmos.dm3.corePana.model.reform.ReformPartThumbnailProxy;
import jp.co.transcosmos.dm3.corePana.model.reform.form.ReformDtlForm;
import jp.co.transcosmos.dm3.corePana.model.reform.form.ReformFormFactory;
import jp.co.transcosmos.dm3.corePana.util.PanaFileUtil;
import jp.co.transcosmos.dm3.corePana.vo.HousingInfo;
import jp.co.transcosmos.dm3.corePana.vo.ReformDtl;
import jp.co.transcosmos.dm3.corePana.vo.ReformPlan;
import jp.co.transcosmos.dm3.validation.Validateable;
import jp.co.transcosmos.dm3.validation.ValidationFailure;

import org.apache.commons.fileupload.FileItem;
import org.springframework.util.StringUtils;
import org.springframework.web.servlet.ModelAndView;

/**
 * <pre>
 * リフォーム詳細情報入力確認画面
 * リクエストパラメータで渡されたリフォーム情報のバリデーションを行い、確認画面を表示する。
 * もしバリデーションエラーが発生した場合は入力画面として表示する。
 *
 * 【復帰する View 名】
 *    ・"success" : 正常終了
 *    ・"input" : バリデーションエラーによる再入力
 *
 * 担当者       修正日      修正内容
 * ------------ ----------- -----------------------------------------------------
 * fan			2015.03.11	新規作成
 *
 * 注意事項
 *
 * </pre>
 */
public class ReformDtlConfirmCommand implements Command {

	/** Panasonic用ファイル処理関連共通Util */
	private PanaFileUtil fileUtil;

	/**
	 * Panasonic用ファイル処理関連共通Utilを設定する。<br/>
	 * <br/>
	 *
	 * @param fileUtil
	 *            Panasonic用ファイル処理関連共通Util
	 */
	public void setFileUtil(PanaFileUtil fileUtil) {
		this.fileUtil = fileUtil;
	}
    /** リフォーム情報メンテナンスを行う Model オブジェクト */
    private ReformPartThumbnailProxy reformManager;

    /**
     * リフォーム情報メンテナンスを行う Model　オブジェクトを設定する。<br/>
     * <br/>
     *
     * @param reformManage
     *            リフォーム情報メンテナンスの model オブジェクト
     */
    public void setReformManager(ReformPartThumbnailProxy reformManager) {
        this.reformManager = reformManager;
    }

    /** 共通パラメータオブジェクト */
    private PanaCommonParameters commonParameters;

    /**
     * 共通パラメータオブジェクトを設定する。<br/>
     * <br/>
     * @param commonParameters 共通パラメータオブジェクト
     */
    public void setCommonParameters(PanaCommonParameters commonParameters) {
        this.commonParameters = commonParameters;
    }

    /**
     * 入力確認画面表示処理<br>
     * <br>
     *
     * @param request
     *            HTTP リクエスト
     * @param response
     *            HTTP レスポンス
     */
    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
        // リクエストパラメータを、フォームオブジェクトへ設定する。
        Map<String, Object> model = new HashMap<String, Object>();

        // リクエストパラメータを、フォームオブジェクトへ設定する。
        ReformFormFactory factory = ReformFormFactory.getInstance(request);

     	Object[] forms = factory.createReformDtlForms(request);
        ReformDtlForm form = (ReformDtlForm)forms[0];

        // リクエストパラメータを取得して Form オブジェクトを作成する。
 		PanaHousingSearchForm searchForm = (PanaHousingSearchForm)forms[1];
 		model.put("searchForm", searchForm);

        // 事前チェック:物件基本情報テーブルの読込
        HousingInfo housingInfo = this.reformManager.searchHousingInfo(form.getSysHousingCd());
        if (housingInfo.getSysHousingCd() == null) {
            // データの存在しない場合,メッセージ："｛0｝物件情報が存在しない"表示
            throw new NotFoundException();
        }
        model.put("housingInfo", housingInfo);
        // リフォーム関連情報を一括読込
        Map<String, Object> reform = this.reformManager.searchReform(form.getSysReformCd());

        // リフォームプラン情報の読込
        ReformPlan reformPlan = (ReformPlan) reform.get("reformPlan");

        // 事前チェック
        if (reformPlan == null) {
            // データの存在しない場合,メッセージ："｛0｝システムリフォーム情報が存在しない"表示
            throw new NotFoundException();
        }

        // リフォーム詳細の検索
        List<ReformDtl> reformDtlList = (List<ReformDtl>) reform.get("dtlList");
        // 閲覧権限
        String[] roleId = new String[reformDtlList.size()];
        for (int i = 0; i < reformDtlList.size(); i++) {
            roleId[i] = reformDtlList.get(i).getRoleId();
        }

        // バリデーション処理
        Validateable validateableForm = (Validateable) form;
        // エラーメッセージ用のリストを作成
        List<ValidationFailure> errors = new ArrayList<ValidationFailure>();

        // バリデーションを実行
        if (!validateableForm.validate(errors)) {
            // エラー処理
            setResultLists(form);

            // エラーオブジェクトと、フォームオブジェクトをModelAndView に渡している
            model.put("errors", errors);

            // 閲覧権限
            form.setOldRoleId(roleId);
            model.put("reformDtlForm", form);

            return new ModelAndView("validationError", model);
        }

        // 更新処理の場合
        if ("update".equals(form.getCommand())) {
            // 正常処理
            setResultLists(form);
            // フォームオブジェクトのみをModelAndView に渡している
            model.put("reformDtlForm", form);
            return new ModelAndView("success", model);
        }

        // path = "\data\reform\temp\"
        String temPath = PanaFileUtil.getUploadTempPath();

        // 新規登録処理の場合
        String[] addHidPath = new String[form.getAddFilePath().length];
        String[] addHidFileName = new String[form.getAddFilePath().length];
        for (int idx = 0; idx < form.getAddFilePath().length; ++idx) {
            FileItem fi = form.getAddFilePath()[idx];
            if (fi != null && !StringUtils.isEmpty(fi.getName())) {

                // イメージ１をアップロードし、戻り値：ファイル名を取得
                String fileName = reformManager.getReformPdfFileName();
                PanaFileUtil.uploadFile(fi,
                        PanaFileUtil.conPhysicalPath(this.commonParameters.getHousImgTempPhysicalPath(), temPath),
                        fileName);

                String urlPath = fileUtil.getHousFileTempUrl(temPath,fileName);
                // アップロードしたサーバー側の物理パスを保持
                addHidPath[idx] =  urlPath;
                addHidFileName[idx] = fileName;
            }
        }
        form.setAddHidPath(addHidPath);
        form.setAddHidFileName(addHidFileName);

        setResultLists(form);

        // フォームオブジェクトのみをModelAndView に渡している
        model.put("reformDtlForm", form);

        return new ModelAndView("success", model);
    }

    /**
     * 確認画面表示用formを設定する処理。 <br>
     *
     * @param form
     *            フォーム詳細情報画面form。
     * @return 確認画面表示用form
     */
    private void setResultLists(ReformDtlForm form) {
        if (form.getDivNo() != null) {
            String[] delLength = new String[form.getDivNo().length];
            for (int i = 0; i < form.getDivNo().length; i++) {
                if (form.getDivNo()[i] != null && form.getDivNo()[i] != "") {

                    if (form.getDelFlg() != null) {
                        for (int j = 0; j < form.getDelFlg().length; j++) {
                            if (i == Integer.valueOf(form.getDelFlg()[j])) {
                                delLength[i] = "1";
                                break;
                            } else {
                                delLength[i] = "0";
                            }
                        }
                    } else {
                        delLength[i] = "0";
                    }
                }
            }
            form.setDelFlg(delLength);
        }
    }
}
