/*
 * &copy; Trans-cosmos Inc. 2006, 2007.
 * All rights reserved.
 */
package jp.co.transcosmos.dm3.view;

import java.io.ByteArrayOutputStream;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jp.co.transcosmos.dm3.report.ReplacingBIRTReport;
import jp.co.transcosmos.dm3.report.ReplacingJasperReport;

import org.springframework.web.context.ServletContextAware;
import org.springframework.web.servlet.View;

/**
 * Writes a pdf generated by the replacingJasperReport as the response view. This 
 * view expects either a byte array or a report generator class (ReplacingBIRTReport
 * or ReplacingJasperReport).
 * <p>
 * This view is used when the url-mapping view definition is prefixed with "pdf:"
 * 
 * @author <a href="mailto:rick@knowleses.org">Rick Knowles</a>
 * @version $Id: PDFResponseView.java,v 1.3 2012/08/01 09:28:36 tanaka Exp $
 */
public class PDFResponseView implements View, ServletContextAware {

    private ServletContext servletContext;
    private ReplacingJasperReport jasperReport;
    private ReplacingBIRTReport birtReport;
    private byte[] outputPDFContent;
    private String filename;
    private boolean inline;
    
    public PDFResponseView(ReplacingJasperReport report, String filename, boolean inline) {
        this.jasperReport = report;
        this.filename = filename;
        this.inline = inline;
    }   
    public PDFResponseView(byte[] outputPDFContent, String filename, boolean inline) {
        this.outputPDFContent = outputPDFContent;
        this.filename = filename;
        this.inline = inline;
    }    
    
    public PDFResponseView(ReplacingBIRTReport report, String filename, boolean inline) {
        this.birtReport = report;
        this.filename = filename;
        this.inline = inline;
    }   
    
    public ServletContext getServletContext() {
        return this.servletContext;
    }

    public void setServletContext(ServletContext pServletContext) {
        this.servletContext = pServletContext;
    }

    public String getContentType() {
        return "application/pdf";
    }

    protected String getFilename(Map<?,?> model, HttpServletRequest request, 
            HttpServletResponse response) throws Exception {
        return this.filename == null ? "download.pdf" : this.filename;
    }
    
    public void render(Map model, HttpServletRequest request, 
            HttpServletResponse response) throws Exception {
        response.setContentType(getContentType());
        response.setHeader("Content-Disposition", (
                this.inline ? "inline" : "attachment") + 
                "; filename=" + getFilename(model, request, response));

        if (this.outputPDFContent != null) {
            response.setContentLength(this.outputPDFContent.length);
            response.setBufferSize(this.outputPDFContent.length);
            response.getOutputStream().write(this.outputPDFContent);
        } else if (this.birtReport != null) {
            ByteArrayOutputStream outStream = new ByteArrayOutputStream();
            for (Iterator<?> i = model.keySet().iterator(); i.hasNext(); ) {
                Object key = i.next();
                this.birtReport.setParameter(key + "", model.get(key));
            }
            this.birtReport.writeOutPDFReport(outStream);
            
            response.setContentLength(outStream.size());
            response.setBufferSize(outStream.size());
            outStream.writeTo(response.getOutputStream());
        } else if (this.jasperReport != null) {
            ByteArrayOutputStream outStream = new ByteArrayOutputStream();
            for (Iterator<?> i = model.keySet().iterator(); i.hasNext(); ) {
                Object key = i.next();
                this.jasperReport.setParameter(key + "", model.get(key));
            }
            this.jasperReport.writeOutPDFReport(outStream);
            
            response.setContentLength(outStream.size());
            response.setBufferSize(outStream.size());
            outStream.writeTo(response.getOutputStream());
        }
        response.getOutputStream().flush();
    }
}
